#+title: README
** :earth_africa: Globally
You might find it usefull to install a =packagename app= to simplify searching =packagenames= in your *adventures journey* to debloat your phone.
You can find them in one of your favorite playstores.

**  General
Doing some research about a =package= before you deletion is advised.
This is a first prevention of headaches and :scream:

Therefore look in the [[https://play.google.com/store/search?q=samsung][playstore]]  or on [[https://en.uptodown.com/android/general-android][uptodown]] for more app details.
You can simplify a search by adding the =packagename= directly after =id==
example:
#+begin_src
https://play.google.com/store/apps/details?id=com.sec.android.app.sbrowser
#+end_src

** Best practices

*** Requirements
-  =adb= is installed.
-  Phone is enabled in *develop settings*.
- *usb-debugging* is enabled.

1. start an =adb server=:
#+begin_src bash
adb start-server
adb devices

#+end_src
a successful connection will look like this:
#+begin_src bash
List of devices attached
A_SERIALNUMBER   device
#+end_src

2. accept *access* on your device.
3. When you are finished close the =adb server= by running =adb kill-server=.

*** uninstall a package
Run =adb uninstall <YOUR_PACKAGE_NAME>= example:
#+begin_src bash
adb unintall com.someting.pkg
#+end_src

You know you did the right thing if it returns with a *succes* message.


** how 2 ...
*** find packages
#+begin_src bash
adb shell pm list packages | grep <YOUR_PACKAGE_NAME>
#+end_src
*** find system packages
This will print a list only for system packages.
#+begin_src bash
adb shell pm list packages -s
#+end_src
*** find 3rd party packages
This will print a list only 3rd party (or non-system) packages.
#+begin_src bash
adb shell pm list packages -3
#+end_src
*** find enabled packages
#+begin_src bash
adb shell pm list packages -e
#+end_src
*** find disabled packages
#+begin_src bash
adb shell pm list packages -d
#+end_src
*** find path to the installed APK files
#+begin_src bash
adb shell pm list packages -f
#+end_src

**  :hankey: Possible Errors


*** Package delete failed
Some packages can't be uninstalled by an user.
You might see this error:

[[./images/delete_failed_internal_error.JPG]]

Run:
#+begin_src bash
adb shell pm uninstall --user 0 <YOUR_PACKAGE_NAME>
#+end_src


*** unauthorized device
If you see an error like this:
[[./images/device_unauthorized.JPG]]
It's most likely you didn't accept your computer authorization on your device.
1. Click *"Revoke USB debugging authorizations"*
2. Run =adb devices=
3. Click *accept* on your device.
